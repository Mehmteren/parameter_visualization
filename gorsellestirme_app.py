import streamlit as st
import pandas as pd
import plotly.express as px
import io

# --- Sayfa AyarlarÄ± (GeniÅŸ ekran modu daha iyi grafikler sunar) ---
st.set_page_config(page_title="Parametre GÃ¶rselleÅŸtirme", layout="wide")

st.title("ğŸ“ˆ AnlÄ±k Parametre GÃ¶rselleÅŸtirme AracÄ±")
st.write("LÃ¼tfen `topluexcel.py` ile oluÅŸturduÄŸunuz 'Parametre TarihÃ§esi' Excel dosyasÄ±nÄ± (.xlsx) yÃ¼kleyin.")

# --- 1. Dosya YÃ¼kleme ArayÃ¼zÃ¼ ---
uploaded_file = st.file_uploader(
    "GÃ¶rselleÅŸtirmek iÃ§in bir Excel dosyasÄ± yÃ¼kleyin", 
    type=["xlsx"]
)

# Dosya yÃ¼klendiyse devam et
if uploaded_file is not None:
    try:
        # 2. YÃ¼klenen Excel'i Oku
        st.success(f"'{uploaded_file.name}' dosyasÄ± baÅŸarÄ±yla okundu. Ä°ÅŸleniyor...")
        
        # 'Parametreler.csv' dosyasÄ±nÄ± okurken, bunun aslÄ±nda bir Excel olduÄŸunu varsayÄ±yorum
        # (YÃ¼klediÄŸin dosya adÄ± .xlsx iÃ§eriyordu)
        df = pd.read_excel(uploaded_file, engine='openpyxl')

        st.subheader("Veri Ã–nizlemesi (Ä°lk 5 SatÄ±r)")
        st.dataframe(df.head()) # Verinin ilk 5 satÄ±rÄ±nÄ± gÃ¶ster
        
        # --- 3. Otomatik Grafikler ---
        
        # Grafiklerin X ekseni olarak kullanÄ±lacak ana sÃ¼tun
        x_axis_col = "Zaman (KÃ¼mÃ¼latif)"
        
        # Gerekli sÃ¼tunlar dosyada var mÄ± diye kontrol et
        if x_axis_col not in df.columns:
            st.error(f"HATA: Dosyada '{x_axis_col}' sÃ¼tunu bulunamadÄ±! LÃ¼tfen doÄŸru dosyayÄ± yÃ¼kleyin.")
        else:
            st.header("Ä°stenen Parametre Grafikleri")
            
            # --- Grafik 1: Ortalama Kuvvet ---
            # (GÃ¶rsel: image_a07af4.png)
            if "Ortalama Kuvvet (N)" in df.columns:
                st.subheader("Ortalama Kuvvet GrafiÄŸi")
                fig1 = px.line(
                    df, 
                    x=x_axis_col, 
                    y="Ortalama Kuvvet (N)",
                    title="Ortalama Kuvvet vs. Zaman",
                    markers=True # Her bir Ã¶lÃ§Ã¼m noktasÄ±nÄ± gÃ¶ster
                )
                fig1.update_layout(xaxis_title="GeÃ§en Toplam SÃ¼re", yaxis_title="Ortalama Kuvvet (N)")
                st.plotly_chart(fig1, use_container_width=True)
            
            # --- Grafik 2: AnlÄ±k EÄŸim ---
            # (GÃ¶rsel: image_a07af9.png)
            if "Anlik_EÄŸim (O anki)" in df.columns:
                st.subheader("AnlÄ±k EÄŸim GrafiÄŸi")
                fig2 = px.line(
                    df, 
                    x=x_axis_col, 
                    y="Anlik_EÄŸim (O anki)",
                    title="AnlÄ±k EÄŸim vs. Zaman",
                    markers=True,
                    color_discrete_sequence=['red']
                )
                fig2.update_layout(xaxis_title="GeÃ§en Toplam SÃ¼re", yaxis_title="AnlÄ±k EÄŸim")
                st.plotly_chart(fig2, use_container_width=True)

            # --- Grafik 3: Ortalama EÄŸim ---
            if "Ortalama EÄŸim (N/s)" in df.columns:
                st.subheader("Ortalama EÄŸim GrafiÄŸi")
                fig3 = px.line(
                    df, 
                    x=x_axis_col, 
                    y="Ortalama EÄŸim (N/s)",
                    title="Ortalama EÄŸim vs. Zaman",
                    markers=True,
                    color_discrete_sequence=['green']
                )
                fig3.update_layout(xaxis_title="GeÃ§en Toplam SÃ¼re", yaxis_title="Ortalama EÄŸim (N/s)")
                st.plotly_chart(fig3, use_container_width=True)

            # --- Grafik 4: Alan AltÄ±nda Kalan DeÄŸer (Toplam Ä°ÅŸ) ---
            # (GÃ¶rsel: image_a07b33.png)
            if "Toplam Ä°ÅŸ (J) [K-Y AlanÄ±]" in df.columns:
                st.subheader("Alan AltÄ±nda Kalan DeÄŸer GrafiÄŸi (Toplam Ä°ÅŸ)")
                fig4 = px.line(
                    df,
                    x=x_axis_col,
                    y="Toplam Ä°ÅŸ (J) [K-Y AlanÄ±]",
                    title="Toplam Ä°ÅŸ (KÃ¼mÃ¼latif Enerji) vs. Zaman",
                    markers=True,
                    color_discrete_sequence=['purple']
                )
                fig4.update_layout(xaxis_title="GeÃ§en Toplam SÃ¼re", yaxis_title="Toplam Ä°ÅŸ (Joule)")
                st.plotly_chart(fig4, use_container_width=True)

            # --- 5. Ã–zel Grafik OluÅŸturucu ---
            st.header("Kendi GrafiÄŸini OluÅŸtur")
            
            # Y ekseni iÃ§in Ã‡OKLU sÃ¼tun seÃ§imi
            y_axes = st.multiselect(
                "Y-Eksen(ler)i SeÃ§in:", 
                df.columns, 
                # VarsayÄ±lan olarak ikisini birden seÃ§elim
                default=["Anlik_EÄŸim (O anki)", "Ortalama EÄŸim (N/s)"] 
            )
            
            if y_axes:
                st.subheader(f"Ã–zel Grafik: {', '.join(y_axes)} vs. {x_axis_col}")
                fig_custom = px.line(df, x=x_axis_col, y=y_axes, markers=True)
                st.plotly_chart(fig_custom, use_container_width=True)
            
    except Exception as e:
        st.error(f"Dosya okunurken veya grafik Ã§izilirken bir hata oluÅŸtu: {e}")
        st.exception(e) # HatanÄ±n detayÄ±nÄ± ekrana yazdÄ±r

else:
    st.info("BaÅŸlamak iÃ§in lÃ¼tfen bir Excel dosyasÄ± yÃ¼kleyin.")